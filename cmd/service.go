package cmd

import (
	"fmt"

	"github.com/PagerDuty/go-pagerduty"
	"github.com/jaceklubzinski/pd-checker/pkg/base"
	"github.com/jaceklubzinski/pd-checker/pkg/client"
	"github.com/jaceklubzinski/pd-checker/pkg/config"
	"github.com/jaceklubzinski/pd-checker/pkg/database"
	"github.com/jaceklubzinski/pd-checker/pkg/incident"
	"github.com/jaceklubzinski/pd-checker/pkg/services"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// serviceCmd represents the service command
var serviceCmd = &cobra.Command{
	Use:   "service",
	Short: "Check for new PagerDuty event on all available services",
	Long:  "Check for new Pagerduty checker event generated by pd-checker-event",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("service called")
		databasePath, err := cmd.Flags().GetString("database-path")
		base.CheckErr(err)
		config := config.NewConfig("", databasePath)
		db, err := database.ConnectDatabase(config)
		base.CheckErr(err)
		repository := database.NewIncidentRepository(db)
		repository.InitIncidentRepository()
		pdclient := pagerduty.NewClient(getFlagAuthToken())
		conn := client.NewApiClient(pdclient)
		serviceClient := services.Services{Service: conn}
		service := serviceClient.Service.Get()
		incident := incident.IncidentService{IncidentClient: conn, DbRepository: repository}
		incident.SetOptions()
		for _, s := range service.Services {
			incident.Options.ServiceIDs = []string{s.APIObject.ID}
			incident.CheckTriggered()
		}
	},
}

func init() {
	rootCmd.AddCommand(serviceCmd)
	viper.AutomaticEnv()
	serviceCmd.PersistentFlags().String("pagerduty_auth_token", "", "Set your PagerDuty auth Token")
}
